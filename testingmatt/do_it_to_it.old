#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <limits.h>

#define MAX_COMMAND_LENGTH 1024

/* Function to retrieve the value of the specified environment variable */
char* get_environment_variable(const char *variable_name, char *envp[]) {
    int i;
    char *result = NULL;

    for (i = 0; envp[i] != NULL; i++) {
        char *env_var = envp[i];
        char *name_end = strchr(env_var, '=');

        if (name_end != NULL) {
            int name_length = name_end - env_var;
            if (strncmp(env_var, variable_name, name_length) == 0) {
                result = name_end + 1;
                break;
            }
        }
    }

    return result;
}

int execute_command(const char *command, char *envp[]) {
    char *command_path;
    char *path_token;
    pid_t pid;
    int status;
    struct stat st;

    pid = fork();
    if (pid == -1) {
        perror("fork");
        return 1;
    }

    if (pid == 0) {
        char *args[MAX_COMMAND_LENGTH];
        int i = 0;
        char *token = strtok((char *)command, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        command_path = get_environment_variable("PATH", envp);
        path_token = strtok(command_path, ":");
        while (path_token != NULL) {
            char full_path[PATH_MAX];
            snprintf(full_path, sizeof(full_path), "%s/%s", path_token, args[0]);
            if (stat(full_path, &st) == 0 && S_ISREG(st.st_mode) && access(full_path, X_OK) == 0) {
                execve(full_path, args, envp);
                perror(args[0]);
                exit(EXIT_FAILURE);
            }
            path_token = strtok(NULL, ":");
        }

        fprintf(stderr, "Command '%s' not found.\n", args[0]);
        exit(EXIT_FAILURE);
    } else {
        wait(&status);
        return WEXITSTATUS(status);
    }
}

void run_cd(const char *args[]) {
    if (args[1]) {
        if (chdir(args[1]) == -1) {
            perror("cd");
        }
    } else {
        fprintf(stderr, "cd: missing argument\n");
    }
}

void run_pwd() {
    char cwd[PATH_MAX];
    if (getcwd(cwd, sizeof(cwd)) != NULL) {
        printf("%s\n", cwd);
    } else {
        perror("pwd");
    }
}

void run_echo(const char *args[]) {
    int i;
    for (i = 1; args[i] != NULL; i++) {
        printf("%s ", args[i]);
    }
    printf("\n");
}

void enumerate_environment(char *envp[]) {
    int i = 0;
    while (envp[i] != NULL) {
        printf("%s\n", envp[i]);
        i++;
    }
}

void print_environment_variable(const char *variable_name, char *envp[]) {
    char *value = get_environment_variable(variable_name, envp);
    if (value != NULL) {
        printf("%s\n", value);
    } else {
        printf("Environment variable '%s' not found.\n", variable_name);
    }
}

int main(void) {
    char command[MAX_COMMAND_LENGTH];
    int interactive_mode = isatty(STDIN_FILENO);

    extern char **environ; /* Add this line to declare environ */

    while (1) {
        if (interactive_mode) {
            printf("$ ");
            if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL) {
                if (feof(stdin)) {
                    printf("\n");
                    break;
                } else {
                    perror("fgets");
                    continue;
                }
            }
        } else {
            if (read(STDIN_FILENO, command, MAX_COMMAND_LENGTH) == 0) {
                break;
            }
        }

        command[strcspn(command, "\n")] = '\0';

        if (strcmp(command, "exit") == 0) {
            break;
        } else if (strcmp(command, "env") == 0) {
            enumerate_environment(environ);
        } else if (strncmp(command, "echo ", 5) == 0) {
            /* Extract the variable name from the command (e.g., "echo VAR_NAME") */
            char *variable_name = command + 5;
            print_environment_variable(variable_name, environ);
        } else {
            if (execute_command(command, environ) != 0) {
                fprintf(stderr, "Command '%s' not found.\n", command);
            }
        }
    }

    return 0;
}

