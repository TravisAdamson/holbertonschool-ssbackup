#include "shell.h"

/**
 * builtIn_cd - changes current working directory
 * @path: desired destination working directory
 * Return: 0 upon success, -1 otherwise
 */

/* This is a rough draft - completion to follow */
/* Possible argv[] integration for '-', '.', '..', etc. */
int builtIn_cd(char *path)
{
	return (chdir(path));
}

#include "shell.h"

/**
 * signalThing - checks for SIGINT
 * @sig: signal
 */

void signalThing(int sig)
{
	char *prmptStyle = "\n# ";

	if (sig == SIGINT)
		if (isatty(STDIN_FILENO))
			write(STDOUT_FILENO, prmptStyle, strlen(prmptStyle));
}

#include "shell.h"

/**
 * builtIn_env - prints environmental variables
 * Return: 0 upon success, -1 otherwise
 */

int builtIn_env(void)
{
	char **ourEnv = NULL;
	int iter = 0;

	for (ourEnv = environ; *ourEnv; ++ourEnv)
		printf("%s\n", *ourEnv), iter++;

	return (iter > 0 ? 0 : -1);
}

#include "shell.h"

/**
 * emptyInput - judges if input is only space characters
 * @inPut: input string
 * Return: 0 if empty, -1 otherwise
 */

int emptyInput(char *inPut)
{
	int iter = 0;
	size_t spc = 0;

	if (inPut)
		for (iter = 0; inPut[iter]; iter++)
			if (inPut[iter] == ' ' ||
			    inPut[iter] == '\n' ||
			    inPut[iter] == '\t' ||
			    inPut[iter] == '\r')
				spc++;

	return (spc == strlen(inPut) ? 0 : -1);
}

#include "shell.h"

/**
 * fileExist - checks if a file exists
 * @file: file that needs to be checked
 * Return: The status of the requested file
 */

int fileExist(char *file)
{
	struct stat buffer;

	return (stat(file, &buffer));
}


#include "shell.h"

/**
 * forkExec - launches input command with its arguments
 * @input: command
 * @argv: arguments to the command
 */

void forkExec(char *input, char **argv)
{
        pid_t launch = 0;
        int status = 0;

        launch = fork();

        if (launch == -1)
                perror(argv[0]), exit(EXIT_FAILURE);
        else if (launch == 0)
        {
                if (execvp(argv[0], argv) == -1)
                        perror(argv[0]), free(input), exit(EXIT_FAILURE);
        }
        else
                wait(&status);
}

#include "shell.h"

/**
 * freecmdS - frees memory related to cmdS argv created in main
 * @cmdS: argument vector
 */

void freecmdS(char **cmdS)
{
	int iter = 0;

	for (iter = 0; cmdS[iter]; iter++)
		cmdS[iter] = NULL;

	if (*cmdS)
		free(*cmdS), *cmdS = NULL;
}

#include "shell.h"

/**
 * goFission - splits/tokenizes input string per delimiter(s)
 * @input: input
 * @delim: delimiter(s) by which input is to be divided
 * Return: next acceptable instance of input, NULL otherwise
 */

char *goFission(char **input, char *delim)
{
	char *cmdT = NULL;

	while ((cmdT = strsep(input, delim)) && !*cmdT)
		;

	return (cmdT);
}

#include "shell.h"

/**
 * lePrompt - gets line from input and maintains prompt
 * @prmptStyle: How we want the prompt to look
 * @inPut: input received from stdin
 * @len: the length of the input from stdin
 * Return: the number of characters read
 */

ssize_t lePrompt(const char *prmptStyle, char **inPut, size_t *len)
{
	ssize_t gotLine = 0;

	if (isatty(STDIN_FILENO))
		write(STDOUT_FILENO, prmptStyle, strlen(prmptStyle));

	gotLine = getline(inPut, len, stdin);
	if (gotLine == EOF)
		return (-1);
	if (gotLine == 0)
		return (1);

	return (gotLine);
}


#include "shell.h"

/**
 * parseInput - parses/tokenizes input into string vector
 * @inPut: object string
 * @cmdS: destination string vector
 * @delim: delimiter to be fed to splitting/tokenizing function
 * Return: 0 if inPut parsed to cmdS, -1 otherwise
 */

int parseInput(char *inPut, char *cmdS[], char *delim)
{
	int iter = 0;
	char *cmdT = NULL, *dup = NULL;

	for (dup = inPut, iter = 0; (cmdT = goFission(&dup, delim)); iter++)
	{
		cmdS[iter] = cmdT;
		if (strcmp("exit", cmdS[0]) == 0)
		{
			freecmdS(cmdS);
			if (inPut)
				free(inPut);
			exit(0);
		}
	}
	if (cmdT != NULL)
		cmdT = NULL;

	if (dup != NULL)
		free(dup), dup = NULL;

	return (*cmdS ? 0 : -1);
}

#include "shell.h"

/**
 * main - infinite loop for prompt
 * Return: Always 0
 */

int main(void)
{
	char *inPut = NULL;
	size_t inputLen = 0;
	int prmptChk = 0;
	char *cmdS[BUFSIZ] = { NULL };

	while (1)
	{
		signal(SIGINT, signalThing);

		prmptChk = lePrompt("# ", &inPut, &inputLen);
		if (prmptChk == -1)
			free(inPut), exit(0);
		else if (prmptChk == 1)
			continue;

		if (emptyInput(inPut) == 0)
		{
			free(inPut), inPut = NULL;
			continue;
		}

		parseInput(inPut, cmdS, SPC_DELIM);

		forkExec(inPut, cmdS);

		freecmdS(cmdS);

		if (inPut != NULL)
			free(inPut), inPut = NULL;

		fflush(stdout);
	}
	return (0);
}


#ifndef __SHELL_H__
#define __SHELL_H__

#define SPC_DELIM " \t\n\r"
#define PATH_DELIM ":"
#define MAX_LEN 1024

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <errno.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <time.h>

extern char **environ;

/**
 * struct builtIn - struct to assist in calling built-in functions
 * @builtIn_call: built-in function name
 * @bIn_function: function called if input = builtIn_call, NULL otherwise
 */

typedef struct builtIn
{
	char *builtIn_call;
	int (*bIn_function)();
} builtIn;

void __attribute__ ((constructor)) coolIntro(void);
ssize_t lePrompt(const char *, char **, size_t *);
void signalThing(int);
int fileExist(char *);
char *goFission(char **, char *delim);
void forkExec(char *, char **);
void freecmdS(char **);
int emptyInput(char *);
int parseInput(char *inPut, char *cmdS[], char *delim);

/* Built-in implementations */
int builtIn_env(void);
int builtIn_cd(char *path);

#endif


